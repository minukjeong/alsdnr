<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>쉴드</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="frame">        
    </div>
    <h1>인공지능 위생 감독관 shield</h1>
<div class="d-grid gap-2 col-6 mx-auto">
<button class="btn btn-info" style="text-align: center" type="button" onclick="init()">시작</button>
</div>
<div><canvas id="canvas"></canvas></div>
<div id="label-container" style="margin-left: 540px;"></div>
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@teachablemachine/pose@0.8/dist/teachablemachine-pose.min.js"></script>
<script type="text/javascript">
    // More API functions here:
    // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/pose

    // the link to your model provided by Teachable Machine export panel
    const URL = "./my_model/";
    let model, webcam, ctx, labelContainer, maxPredictions;
    let sec = false;

    async function init() {
        const modelURL = URL + "model.json";
        const metadataURL = URL + "metadata.json";

        // load the model and metadata
        // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
        // Note: the pose library adds a tmPose object to your window (window.tmPose)
        model = await tmPose.load(modelURL, metadataURL);
        maxPredictions = model.getTotalClasses();

        // Convenience function to setup a webcam
        const size = 500;
        const flip = true; // whether to flip the webcam
        webcam = new tmPose.Webcam(size, size, flip); // width, height, flip
        await webcam.setup(); // request access to the webcam
        await webcam.play();
        window.requestAnimationFrame(loop);

        // append/get elements to the DOM
        const canvas = document.getElementById("canvas");
        canvas.width = size; canvas.height = size;
        ctx = canvas.getContext("2d");
        labelContainer = document.getElementById("label-container");
        for (let i = 0; i < maxPredictions; i++) { // and class labels
            labelContainer.appendChild(document.createElement("div"));
        }
    }

    async function loop(timestamp) {
        webcam.update(); // update the webcam frame
        await predict();
        window.requestAnimationFrame(loop);
    }
    var isdisabled = false;
    var isPlaying = false;
    const playTerm = 1000;

    async function  playSound(fileName)
    {

    var audio = new Audio(fileName);

    setTimeout(function(){
    audio.loop = false;
    audio.onended = function ()
    {
        isPlaying = false;
    }
    if(!isPlaying) audio.play();

    isPlaying = true;
    webCamRedEffect();
    }, playTerm);

    }

    async function predict() {
        // Prediction #1: run input through posenet
        // estimatePose can take in an image, video or canvas html element
        const { pose, posenetOutput } = await model.estimatePose(webcam.canvas);
        // Prediction 2: run input through teachable machine classification model
        const prediction = await model.predict(posenetOutput);
        const sleep = (ms) => new Promise((res) => setTimeout(res, ms));
                if(prediction[0].probability.toFixed(2) == 1.00){
                    status = "stand"
                }else if(prediction[5].probability.toFixed(2) == 1.00){ 
                    status = "stand2"   
                }else if(prediction[2].probability.toFixed(2) == 1.00){
                    if(status == "bent"){
                        if(isdisabled){
                            }else{
                                sec = false;
                                isdisabled = true;
                                playSound('손을씻어주세요.mp3');
                                isdisabled = false;
                                setTimeout(function() {
                                sec = true;
                                }, 2000);
                                setTimeout(function() {
                                if(sec)
                                webCamNoEffect();
                                }, 2200);
                            }    
                        
                    }
                    status = "bent"
                }else if(prediction[3].probability.toFixed(2) == 1.00){
                    if(status == "face"){
                        if(isdisabled){
                            }else{
                                sec = false;
                                isdisabled = true;
                                playSound('손을씻어주세요.mp3');
                                isdisabled = false;
                                setTimeout(function() {
                                sec = true;
                                }, 2000);
                                setTimeout(function() {
                                if(sec)
                                webCamNoEffect();
                                }, 2200);
                            }    
                    }
                    status = "face"
                }else if(prediction[4].probability.toFixed(2) == 1.00){
                    if(status == "push"){
                        if(isdisabled){
                            }else{
                                sec = false;
                                isdisabled = true;
                                playSound('손을씻어주세요.mp3');
                                isdisabled = false;
                                setTimeout(function() {
                                sec = true;
                                }, 2000);
                                setTimeout(function() {
                                if(sec)
                                webCamNoEffect();
                                }, 2200);
                        }
                    }
                    status = "push"   
                }else if(prediction[7].probability.toFixed(2) == 1.00){
                    if(status == "sitdown face"){
                        if(isdisabled){
                            }else{
                                sec = false;
                                isdisabled = true;
                                playSound('손을씻어주세요.mp3');
                                isdisabled = false;
                                setTimeout(function() {
                                sec = true;
                                }, 2000);
                                setTimeout(function() {
                                if(sec)
                                webCamNoEffect();
                                }, 2200);
                        }
                    }
                    status = "sitdown face"
                }else if(prediction[8].probability.toFixed(2) == 1.00){
                    if(status == "sitdown push"){
                        if(isdisabled){
                            }else{
                                sec = false;
                                isdisabled = true;
                                playSound('손을씻어주세요.mp3');
                                isdisabled = false;
                                setTimeout(function() {
                                sec = true;
                                }, 2000);
                                setTimeout(function() {
                                if(sec)
                                webCamNoEffect();
                                }, 2200);
                        }
                    }
                    status = "sitdown push"      
                }    

        for (let i = 0; i < maxPredictions; i++) {
            const classPrediction =
                prediction[i].className + ": " + prediction[i].probability.toFixed(2);
            labelContainer.childNodes[i].innerHTML = classPrediction;
        }

        // finally draw the poses
        drawPose(pose);
    }

    function drawPose(pose) {
        if (webcam.canvas) {
            ctx.drawImage(webcam.canvas, 0, 0);
            // draw the keypoints and skeleton
            if (pose) {
                const minPartConfidence = 0.5;
                tmPose.drawKeypoints(pose.keypoints, minPartConfidence, ctx);
                tmPose.drawSkeleton(pose.keypoints, minPartConfidence, ctx);
            }
        }
    }
    function webCamRedEffect(){
       const canvas = document.getElementById("canvas");
        canvas.style.zIndex = 1;
        canvas.style.backgroundColor = "red";
        canvas.style.opacity = 0.5;
    }

    function webCamNoEffect(){
        const canvas = document.getElementById("canvas");
        canvas.removeAttribute("style");
    }
</script>
      
</body>
</html>
